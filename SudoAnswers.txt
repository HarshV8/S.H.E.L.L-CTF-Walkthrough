   _____   _    _   ______   _        _               _____   _______   ______         ____                _____   _  __  _____     ____     ____    _____  
  / ____| | |  | | |  ____| | |      | |             / ____| |__   __| |  ____|       |  _ \      /\      / ____| | |/ / |  __ \   / __ \   / __ \  |  __ \ 
 | (___   | |__| | | |__    | |      | |            | |         | |    | |__          | |_) |    /  \    | |      | ' /  | |  | | | |  | | | |  | | | |__) |
  \___ \  |  __  | |  __|   | |      | |            | |         | |    |  __|         |  _ <    / /\ \   | |      |  <   | |  | | | |  | | | |  | | |  _  / 
  ____) | | |  | | | |____  | |____  | |____        | |____     | |    | |            | |_) |  / ____ \  | |____  | . \  | |__| | | |__| | | |__| | | | \ \ 
 |_____/  |_|  |_| |______| |______| |______|        \_____|    |_|    |_|            |____/  /_/    \_\  \_____| |_|\_\ |_____/   \____/   \____/  |_|  \_\
                                                                                                                                                            
                                                                                                                                                            

# Author : Harsh Varagiya 
# Email  : harsh8v@gmail.com

probably the thing that i found funny was that all the questions which require us to 

run the elf executable was that we can kinda "hack" it to get the binary and then get 

the flag directly without anything ! example !!!

>> Taking example of the Challenge "Create it !!"

>> Folder 5

we get to see that :- inside the 64bit folder (for me) 

where the executable is there and we need to make a file named "hello.txt" and run

the executable , and when the executable detects the file it will give us the flag!

but! There's a catch !!!

just like i was supposed to use "escaping sequences" to get the flag from file names havinf "-" and other special characters in them

but i was able to rename them using python and get the job done, which is not how they wanted me to do it (but hey it's hacking)

so , similarly there is a way that we can directly get the flag without even completing the challenge ! 

all we need to do is have a look at the binary of the exectables !!

so to do that we can simply just "cat" the executable to see what it has in it! and we get the output as :

[output]


ELF>ï¿½@@ï¿½@8	@@@@@@ï¿½ï¿½88@8@@@ ``@H ((`(`ï¿½ï¿½TT@T@DDPï¿½tdï¿½ï¿½@ï¿½@44Qï¿½tdRï¿½td``ï¿½ï¿½/lib64/ld-linux-x86-64.so.2GNUGNUJï¿½<ï¿½.z9ï¿½Ñ»{"ï¿½Nï¿½ÛŽï¿½ï¿½/ 
                                           libc.so.6fopenputsfclose__libc_start_main__gmon_start__GLIBC_2.2.5ui	>ï¿½`` `(`0`8`Hï¿½Hï¿½ï¿½
      Hï¿½ï¿½tï¿½KHï¿½ï¿½ï¿½5ï¿½
                   ï¿½%ï¿½
                       @ï¿½%ï¿½
                             hï¿½ï¿½ï¿½ï¿½ï¿½ï¿½%ï¿½
                                       hï¿½ï¿½ï¿½ï¿½ï¿½ï¿½%ï¿½
                                                  hï¿½ï¿½ï¿½ï¿½ï¿½ï¿½%z
                                                             hï¿½ï¿½ï¿½ï¿½ï¿½ï¿½%r
                                                                        hï¿½ï¿½ï¿½ï¿½ï¿½1ï¿½Iï¿½ï¿½^Hï¿½ï¿½Hï¿½ï¿½ï¿½PTIï¿½ï¿½ï¿½@Hï¿½ï¿½@Hï¿½Ç½@ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½fDï¿½W`UH-P`Hï¿½ï¿½Hï¿½ï¿½w]Ã¸Hï¿½ï¿½tï¿½]ï¿½P`ï¿½ï¿½ï¿½ï¿½P`UH-P`Hï¿½ï¿½Hï¿½ï¿½Hï¿½ï¿½Hï¿½ï¿½?Hï¿½Hï¿½ï¿½u]ÃºHï¿½ï¿½tï¿½]Hï¿½Æ¿P`ï¿½ï¿½ï¿½ï¿½=ï¿½
 uUHï¿½ï¿½ï¿½~ï¿½ï¿½ï¿½]ï¿½ï¿½
 ï¿½ï¿½@Hï¿½= tï¿½Hï¿½ï¿½tUï¿½ `Hï¿½ï¿½ï¿½ï¿½]ï¿½{ï¿½ï¿½ï¿½ï¿½sï¿½ï¿½ï¿½UHï¿½ï¿½Hï¿½ï¿½ï¿½ï¿½@ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½ï¿½Hï¿½Eï¿½Hï¿½}ï¿½tï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½ï¿½Hï¿½Eï¿½Hï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
ï¿½ï¿½ï¿½Hï¿½ï¿½tï¿½Lï¿½ï¿½Lï¿½ï¿½Dï¿½ï¿½Aï¿½ï¿½Hï¿½ï¿½H9ï¿½uï¿½Hï¿½[]A\A]A^A_ï¿½ff.ï¿½ï¿½ï¿½Hï¿½Hï¿½ï¿½rI'm a file. Delete meFailed. Try again!e1ed23c30baa9d7324f5b41e78755cf2;0ï¿½ï¿½ï¿½ï¿½|ï¿½ï¿½ï¿½ï¿½Lï¿½ï¿½ï¿½ï¿½ï¿½$ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
       zRx
                ï¿½ï¿½ï¿½ï¿½ï¿½*zRx
                                  ï¿½$ï¿½ï¿½ï¿½`FJ
F                                           ï¿½?;*3$"D%ï¿½ï¿½ï¿½KAï¿½C
  DdXï¿½ï¿½ï¿½eBï¿½Eï¿½E ï¿½E(ï¿½H0ï¿½H8ï¿½M@l8A0A(B BBï¿½ï¿½ï¿½ï¿½ï¿½ï¿½@p@
ï¿½@``ï¿½ï¿½ï¿½oï¿½@H@ï¿½@                                   P@
J
 `xï¿½@ï¿½	ï¿½ï¿½ï¿½oï¿½@ï¿½ï¿½ï¿½oï¿½ï¿½ï¿½oï¿½@(`ï¿½@ï¿½@ï¿½@ï¿½@ï¿½@GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4.symtab.strtab.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rela.dyn.rela.plt.init.text.fini.rodata.eh_frame_hdr.eh_frame.init_array.fini_array.jcr.dynamic.got.got.plt.data.bss.comment8@8#T@T 1t@t$Dï¿½ï¿½ï¿½oï¿½@ï¿½N
                                                                        ï¿½@ï¿½ï¿½VH@HJ^ï¿½ï¿½ï¿½oï¿½@ï¿½
                                                                                                      kï¿½ï¿½ï¿½oï¿½@ï¿½ zï¿½@ï¿½ï¿½ï¿½@ï¿½x
                                                                                                                                      ï¿½P@Pï¿½p@p`ï¿½ï¿½@ï¿½ï¿½ï¿½ï¿½@ï¿½	ï¿½ï¿½@ï¿½ï¿½ï¿½@ï¿½4ï¿½ @ ï¿½ï¿½ï¿½ ï¿½(`(ï¿½ï¿½ï¿½`ï¿½@`@P`Pï¿½0P+{H	P]8@T@t@ï¿½@ï¿½@H@ï¿½@ï¿½@	ï¿½@
ï¿½@
    P@
ï¿½@ï¿½@ï¿½@ï¿½@ @`` `(`ï¿½``@`P`ï¿½ï¿½
ï¿½@Kï¿½P`SeP`lï¿½ï¿½@ï¿½ï¿½@`ï¿½ ï¿½H`ï¿½ï¿½@ï¿½
 1P`= W
                   P@crtstuff.c__JCR_LIST__deregister_tm_clonesregister_tm_clones__do_global_dtors_auxcompleted.6973__do_global_dtors_aux_fini_array_entryframe_dummy__frame_dummy_init_array_entrytest.c__FRAME_END____JCR_END____init_array_end_DYNAMIC__init_array_start_GLOBAL_OFFSET_TABLE___libc_csu_fini_ITM_deregisterTMCloneTabledata_startputs@@GLIBC_2.2.5_edatafclose@@GLIBC_2.2.5_fini__libc_start_main@@GLIBC_2.2.5__data_start__gmon_start____dso_handle_IO_stdin_used__libc_csu_init_end_start__bss_startmainfopen@@GLIBC_2.2.5_Jv_RegisterClasses__TMC_END___ITM_registerTMCloneTable_init


[/output]






now i know thats a lot of data , but most of it is unreadable, but the key thing is the flag !

i won't lie, i guessed that they would not use any data encapsulation technieques to hide the data in the source code but if they had even dont that 
then the mem_dump of the executable would have revealed that ! 

if you notice carefully in the executable we can see that in the executable the "Failed. Try Again" is there along with some other data !

so, we know that if we run the executable without completing the challenge , then the output will be printed as the "Failed. Try Again" line

but , if we look carefully we also see other things very close to it especially this "e1ed23c30baa9d7324f5b41e78755cf2" string 

that is the string that gets printed out using if() condition and that means that it will be printed only when we complete the challenge

and that is the flag ! 

so we can just have a look at the binary and see the flag right there! without completing the challenge!

that's nice! but to be honest a true guy who knows what he is doing and knows his way around source codes will actully excel at this CTF

so, i guess that having this knowledge won't change the outcome a lot!

Thanks For Reading this! 

exit()  #:p


